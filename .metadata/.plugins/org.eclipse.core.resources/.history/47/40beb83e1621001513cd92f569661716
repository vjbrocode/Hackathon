package com.test;

import java.io.FileInputStream;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedList;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.ss.usermodel.Cell;

public class ExcelRead {
	public static HashMap<Integer, Double> getRates(HSSFSheet sheet) {
		HashMap<Integer, Double> upperRateLimit = new HashMap<Integer,Double>();
		try {
		    HSSFRow row;
		    HSSFCell cell;
	
		    int rows; // No of rows
		    rows = sheet.getPhysicalNumberOfRows();
	
		    int cols = 0; // No of columns
		    int tmp = 0;
	
		    // This trick ensures that we get the data properly even if it doesn't start from first few rows
		    for(int i = 0; i < 10 || i < rows; i++) {
		        row = sheet.getRow(i);
		        if(row != null) {
		            tmp = sheet.getRow(i).getPhysicalNumberOfCells();
		            if(tmp > cols) cols = tmp;
		        }
		    }
	
		    for(int r = 1; r < rows; r++) {
		        row = sheet.getRow(r);
		        if(row != null) {
	                cell = row.getCell(2);
	                if(cell != null && Cell.CELL_TYPE_NUMERIC == cell.getCellType()) {
	                    // Your code here
                		try {
                			upperRateLimit.put((int) row.getCell(1).getNumericCellValue(), row.getCell(2).getNumericCellValue());
                		} catch (Exception e) {
                			upperRateLimit.put(0, row.getCell(2).getNumericCellValue());
                		}
                	}
		        }
		    }
		} catch(Exception ioe) {
		    ioe.printStackTrace();
		}
		return upperRateLimit;
	}
	
	public static HashMap<Integer, Integer> getUniqueMeterIDs(HSSFSheet sheet) {
		HashMap<Integer, Integer> meterID = new HashMap<Integer,Integer>();
		try {
			HSSFRow row;
		    HSSFCell cell;
		    int rows; // No of rows
		    rows = sheet.getPhysicalNumberOfRows();
			for(int r = 0; r < rows; r++) {
		        row = sheet.getRow(r);
		        if(row != null) {
	                cell = row.getCell(0);
	                if(cell != null && Cell.CELL_TYPE_NUMERIC == cell.getCellType()) {
		                meterID.put((int) cell.getNumericCellValue(),r);
	                }
		        }
		    }
		} catch (Exception e) {
			System.out.println("Excpetion geting unique meter id " + e);
		}
		return meterID;
	}
	
	public static HashMap<String, HashMap<Integer, Integer>> getMinimumAndMaximumReadingByDate(HSSFSheet sheet, HashMap<Integer, Integer> meterID, String dateformat, String fromDate, String toDate) {
		HashMap<Integer, Integer> minReading = new HashMap<Integer,Integer>();
		HashMap<Integer, Integer> maxReading = new HashMap<Integer,Integer>();
		HashMap<String, HashMap<Integer, Integer>> minAndMaxReading = new HashMap<String, HashMap<Integer, Integer>>();
		SimpleDateFormat dateFormat = new SimpleDateFormat(dateformat);
		try {
			dateFormat.parse(fromDate);
			HSSFRow row;
		    HSSFCell cell;
		    int rows; // No of rows
		    rows = sheet.getPhysicalNumberOfRows();
		    for (int id: meterID.keySet()) {
		    	LinkedList<Integer> minList = new LinkedList<Integer>();
		    	LinkedList<Integer> maxList = new LinkedList<Integer>();
				for(int r = 0; r < rows; r++) {
			        row = sheet.getRow(r);
			        if(row != null) {
		                cell = row.getCell(2);
		                if(cell != null && Cell.CELL_TYPE_NUMERIC == cell.getCellType()) {
		        	        if(id == (int)row.getCell(0).getNumericCellValue()) {
		        	        	minList.add((int)cell.getNumericCellValue());
		        	        	maxList.add((int)row.getCell(4).getNumericCellValue());
		        	        }
		                }
		            }
			    }
				minReading.put(id, Collections.min(minList,null));
				maxReading.put(id, Collections.max(maxList,null));
		    }
		} catch (Exception e) {
			System.out.println("getMinimumReadingByDate " + e);
		}
		minAndMaxReading.put("MINReading", minReading);
		minAndMaxReading.put("MAXReading", maxReading);
		return minAndMaxReading;
	}
	
public static void main(String arg[]) {
	try {
		String dateFormat = "MM/dd/yyyy hh:mm a";
		String fromDate = "6/01/2015 00:00 AM";
		String toDate = "6/30/2015 11:59 PM";
		HashMap<Integer, Double> upperRateLimit = new HashMap<Integer,Double>();
		HashMap<Integer, Integer> meterID = new HashMap<Integer,Integer>();
		HashMap<Integer, Integer> minReading = new HashMap<Integer,Integer>();
		HashMap<Integer, Integer> maxReading = new HashMap<Integer,Integer>();
		HashMap<String, HashMap<Integer, Integer>> minAndMaxReading = new HashMap<String, HashMap<Integer, Integer>>();
		String file = "C:\\Users\\Administrator\\workspace\\Test\\lib\\testfile.xls";
	    POIFSFileSystem fs = new POIFSFileSystem(new FileInputStream(file));
	    HSSFWorkbook wb = new HSSFWorkbook(fs);
	    try {
	    	HSSFSheet sheet = wb.getSheet("rate table");
	    	upperRateLimit = getRates(sheet);
	    } catch (Exception e) {
	    	System.out.println("Sheet not found " + e);
	    }
		try {
		    HSSFSheet sheet = wb.getSheet("usage template");
		    HSSFRow row;
		    HSSFCell cell;
	
		    int rows; // No of rows
		    rows = sheet.getPhysicalNumberOfRows();
	
		    int cols = 0; // No of columns
		    int tmp = 0;
	
		    // This trick ensures that we get the data properly even if it doesn't start from first few rows
		    for(int i = 0; i < 10 || i < rows; i++) {
		        row = sheet.getRow(i);
		        if(row != null) {
		            tmp = sheet.getRow(i).getPhysicalNumberOfCells();
		            if(tmp > cols) cols = tmp;
		        }
		    }
	
		    // All unique MeterIds from excel sheet
		    meterID = getUniqueMeterIDs(sheet);
		    
		    // Minimum and Maximum Reading per meter Id
		    minAndMaxReading = getMinimumAndMaximumReadingByDate(sheet, meterID, dateFormat, fromDate, toDate);
		    
		    minReading = minAndMaxReading.get("MINReading");
		    maxReading = minAndMaxReading.get("MAXReading");
		    
		    for (int id: meterID.keySet()) {
        	        int value = meterID.get(id);
        	        System.out.println("masterID " + id + ":" + value);
		    }
		    
		    for (int id: minReading.keySet()) {
    	        int value = minReading.get(id);
    	        System.out.println("minReading " + id + ":" + value);
		    }
		    
		    for (int id: maxReading.keySet()) {
    	        int value = maxReading.get(id);
    	        System.out.println("maxReading " + id + ":" + value);
		    }
		} catch(Exception ioe) {
		    ioe.printStackTrace();
		}
	} catch (Exception e) {
		e.printStackTrace();
	}
}
}
